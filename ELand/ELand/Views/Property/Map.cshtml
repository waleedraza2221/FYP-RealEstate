@model IEnumerable<ELand.Models.Property>
@{
    ViewBag.Title = "Map";
}
<style>
    #map {
        height: 500px;
    }

    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    .pac-container {
        font-family: Roboto;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

        #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
</style>
<div class="container">
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>

</div>






<script>
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.
    var a=[];
    var b=[];
    function initAutocomplete() {
        //var marker;
        var latlng = new google.maps.LatLng(30.196179, 71.467094);
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 30.196179, lng: 71.467094 },
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });
        //marker = new google.maps.Marker({
        //    position: latlng,
        //    map: map
        //});
    
        @foreach (var item in Model)
            { string s="s"+item.Id;
            string w = "w" + item.Id;
                <text>

        var @s;
        @s = new google.maps.Marker({
            position:  new google.maps.LatLng(@item.Latitude, @item.Longitude),
            map: map
        });
        a.push(@s);


        var contentString = '<div id="content">'+
  '<div id="siteNotice"><img src="~/Images/Property/@item.GlobalId/@item.MainImage" width="100" height="100" />'+
  '</div>'+
  '<h3 id="firstHeading" class="firstHeading">@item.Title</h3>'+
  '<div id="bodyContent">'+
  '<p><b>@item.City.Name</b>, @item.Description</p>'+
  '<p>,<b> <a href="@Url.Action("Index", "Property", new { Id=item.Id})">'+
  'View Property</a></b> '+
  '(@item.PublishDate).</p>'+
  '</div>'+
  '</div>';

        var @w = new google.maps.InfoWindow({
            content: contentString

        });
        b.push(@w);
        //s.addListener('click', function() {
        //         w.open(map, s);
        //     });


        </text>
            }

       a.forEach(function(obj,i){ 
            a[i].addListener('click', function() {
                       b[i].open(map, a[i]);
                });
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // [START region_getplaces]
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.


                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

    }


</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYN4VjgQCPJqXyavhf1ZLevhsGD-p1qnI&libraries=places&callback=initAutocomplete" async defer></script>

