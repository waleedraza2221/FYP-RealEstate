@model ELand.Models.Property

@{
    ViewBag.Title = "Create";
}
<link href="~/Content/css/normalize.css" rel="stylesheet" />
<link href="~/Content/css/demo.css" rel="stylesheet" />
<link href="~/Content/css/component.css" rel="stylesheet" />
<style>
    #map {
        height: 500px;
    }

    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    .pac-container {
        font-family: Roboto;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

        #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
</style>

<br />
<form method="post" enctype="multipart/form-data" action="@Url.Action("Create","Property")">
    @Html.AntiForgeryToken()
<div class="container">
    @Html.ValidationSummary(true)
    <div class="ct-headerText--normal text-uppercase ct-u-marginBottom40">
        <h2>
            <span class="ct-text--highlightGray">Description &amp; Address</span>
        </h2>
    </div>
    <div class="row">
        <div class="col-md-6">
           
                <div class="form-group ">
                    <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Title</label>
                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom40" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })<br />
                    <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Address</label>
                    @Html.TextBoxFor(model => model.Address, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom40" })

                     @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

<br />
                     <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">City</label>
                    @Html.DropDownList("CityId", null, htmlAttributes: new { @class = "select2-container ct-js-select ct-select2--light ct-select-lg" })
                    @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                    <br />
                    <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Property description</label>
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom40" })
              
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    <br />

                    <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Mark on map <span>You can drag &amp; drop marker</span></label>
                    <div class="col-md-12">
                        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
                        <div id="map"></div>

                    </div>
                    <hr />
                    <h5 class="ct-u-marginBottom10">GPS Data</h5>
                    <div class="ct-latlngAuto">
                        @Html.TextBoxFor(x => x.Latitude, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom10 latidude", required = "required", placeholder = "Latidude" })
                        @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                        <br />

                         @Html.TextBoxFor(x => x.Longitude, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom50 longitude", required = "required", placeholder = "Longitude" })
                        @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                        <br />

                    </div>
     
                </div>
        
        </div>
        <div class="col-md-6">
            <div class="form-group ">
                    <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Upload featured image</label>
                    <div class="row ct-u-marginBottom20">
                        <div class="col-md-12">
                            <div class="box">
                                <input type="file" accept="image/*" name="titleimg" id="file-7" class="inputfile inputfile-6">
                                <label for="file-7"><span></span> <strong><svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" viewBox="0 0 20 17"><path d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z"></path></svg> Choose a file…</strong></label>
                            </div> </div>
                    
                    </div>
                    <span class="ct-u-marginBottom40">This is going to be the main image of property, it will be shown in thumbnails and all important places.</span><br />
                    <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">upload images to gallery</label>
                    <div class="row ct-u-marginBottom20">
                        <div class="col-md-12">
                            <div class="box">
                                <input type="file" accept="image/*" name="gimages" id="file-8" class="inputfile inputfile-6" data-multiple-caption="{count} files selected" multiple="">
                                <label for="file-8"><span></span> <strong><svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" viewBox="0 0 20 17"><path d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z"></path></svg> Choose a file…</strong></label>
                            </div>
                        </div>
                    </div>
                    <span class="ct-u-marginBottom40">This is going to be the main image of property, it will be shown in thumbnails and all important places.</span>
               
                </div>
            <br />
            <div class="form-group ">
                <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Set price of your property</label>
                <div class="row">
                    <div class="col-md-12">
                        @Html.TextBoxFor(x => x.Price, new { required="required" ,type = "number", value = "0" , @class="form-control input-lg ct-input--border ct-u-marginBottom20" })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })

                        <br />
                     </div>
                </div>
                <div class="ct-u-marginBottom40">
                    @Html.DropDownList("PurposeID", null, new { @class = "select2-container ct-js-select ct-select2--light ct-select-lg" })
                    @Html.ValidationMessageFor(model => model.PurposeID, "", new { @class = "text-danger" })

                    <br />
                </div>
                <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Property summary</label>
                <div class="row ct-u-marginBottom50">
                    <div class="col-md-6">
                        <span class="span ct-u-marginBottom10">Area</span>
                        @Html.TextBoxFor(x => x.Area, new { type = "number", value = "0", @class = "form-control input-lg ct-input--border ct-u-marginBottom20", required = "required" })
                        @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
                        <br />

                         <span class="span ct-u-marginBottom10">Type</span>
                        @Html.DropDownList("TypeID", null, new { @class = "select2-container ct-js-select ct-select2--light ct-select-lg" })
                        @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "text-danger" })
                        <br />

                        <span class="span ct-u-marginBottom10">Baths</span>
                        @Html.TextBoxFor(x => x.Bath, new { type = "number", value = "0", @class = "form-control input-lg ct-input--border ct-u-marginBottom20" })
                        <span class="span ct-u-marginBottom10">Garage</span>
                        @Html.TextBoxFor(x => x.Garage, new { type = "number", value = "0", @class = "form-control input-lg ct-input--border ct-u-marginBottom20" })
                    </div>
                    <div class="col-md-6">
                        <span class="span ct-u-marginBottom10">Area Units</span>
                        
                        @Html.DropDownList("AreaID", null, new { @class = "select2-container ct-js-select ct-select2--light ct-select-lg" })
                        @Html.ValidationMessageFor(model => model.AreaID, "", new { @class = "text-danger" })

                        
                        <br />
                         <span class="span ct-u-marginBottom10">Beds</span>
                        @Html.TextBoxFor(x => x.Bed, new {type="number", value="0", @class = "form-control input-lg ct-input--border ct-u-marginBottom20"})
                        <span class="span ct-u-marginBottom10">Kitchens</span>
                        @Html.TextBoxFor(x => x.Kitchen, new { type = "number", value = "0", @class = "form-control input-lg ct-input--border ct-u-marginBottom20" })
                        <span class="span ct-u-marginBottom10">Pool</span>
                        @Html.TextBoxFor(x => x.Pool, new { type = "number", value = "0", @class = "form-control input-lg ct-input--border ct-u-marginBottom20" })
                    </div>
                </div>
                <label class="ct-fw-600 text-uppercase ct-u-marginBottom20">Amenites <span>Please check what applies</span></label>
                <div class="ct-u-displayTable ct-radio--items ct-u-marginBottom40">
                    <div class="ct-u-displayTableCell">
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Air_Conditioning)
                            <span> Air Conditioning</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.ADSL_Cable)
                            <span>  ADSL Cable</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.WiFi)
                            <span>  WiFi</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.HiFi_Audio)
                            <span> HiFi Audio</span>
                        </div>
                    </div>
                    <div class="ct-u-displayTableCell ct-radio--items">
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Fridge)
                            <span> Fridge</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Grill)
                            <span>  Grill</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Full_HD_TV)
                            <span>  Full HD TV</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Digital_Antenna)
                            <span> Digital Antenna</span>
                        </div>
                    </div>
                    <div class="ct-u-displayTableCell ct-radio--items">
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Kitchen_With_Island)
                            <span> Kitchen With Island</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Exotic_Garden)

                            <span>  Exotic Garden</span>
                        </div>
                        <div class="ct-checbox--custom">
                            @Html.CheckBoxFor(x => x.Guest_House)

                            <span>  Guest House</span>
                        </div>
                    </div>
                </div>

            </div>
    </div>
</div>
    <div class="row">
        <div class="col-md-6">
            <a href="@Url.Action("Index","Home")" class="btn btn-danger">Cancel</a>
            <button class="btn btn-primary">Submit</button>

        </div>
    </div>
    </div>
 
</form>

  


<br />
@section Scripts {
    <script>
        // This example adds a search box to a map, using the Google Place Autocomplete
        // feature. People can enter geographical searches. The search box will return a
        // pick list containing a mix of places and predicted search terms.

        function initAutocomplete() {
            var marker;
            var latlng = new google.maps.LatLng(30.196179, 71.467094);
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 30.196179, lng: 71.467094 },
                zoom: 13,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            marker = new google.maps.Marker({
                position: latlng,
                map: map
            });
            google.maps.event.addListener(map, 'click', function (event) {
                marker.setPosition(event.latLng);

                var yeri = event.latLng;

                var latlongi = "(" + yeri.lat().toFixed(6) + ", " + yeri.lng().toFixed(6) + ")";
                document.getElementById('Latitude').value = yeri.lat().toFixed(6);
                document.getElementById('Longitude').value = yeri.lng().toFixed(6);


            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // [START region_getplaces]
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.


                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });

        }


    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYN4VjgQCPJqXyavhf1ZLevhsGD-p1qnI&libraries=places&callback=initAutocomplete" async defer></script>

<script src="~/Scripts/js1/custom-file-input.js"></script>
}