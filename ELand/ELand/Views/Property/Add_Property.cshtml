@model ELand.Models.PropertySteps.Step1

@{
    ViewBag.Title = "Add_Property";
}
<style>


    #map {
        height: 500px;
    }

    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    .pac-container {
        font-family: Roboto;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

        #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
</style>
<div class="ct-site--map">
    <div class="container">
        <a href="index.html">Home</a>
        <a href="faq.html">Submit Property</a>
        <a href="faq.html">Step 1</a>
    </div>
</div>
<header class="ct-mediaSection" data-stellar-background-ratio="0.3" data-height="140" data-type="parallax" data-bg-image="assets/images/demo-content/agency-parallax.jpg" data-bg-image-mobile="assets/images/demo-content/agency-parallax.jpg" style="min-height: 140px; height: 140px; background-image: url(&quot;assets/images/demo-content/agency-parallax.jpg&quot;); background-position: 50% 24px;">
    <div class="ct-mediaSection-inner">
        <div class="container">
            <div class="ct-steps--submission center-block ct-u-marginBottom20">
                <div class="ct-steps--item">
                    <div class="ct-steps--counter ct-steps--active">
                        <span>1</span>
                    </div>
                </div>
                <div class="ct-steps--item">
                    <div class="ct-steps--counter">
                        <span>2</span>
                    </div>
                </div>
                <div class="ct-steps--item">
                    <div class="ct-steps--counter">
                        <span>3</span>
                    </div>
                </div>
                <div class="ct-steps--item">
                    <div class="ct-steps--counter">
                        <span>4</span>
                    </div>
                </div>
            </div>
            <div class="ct-u-displayTable ct-steps--title text-center">
                <div class="ct-u-displayTableCell">
                    <span>Title</span>
                </div>
                <div class="ct-u-displayTableCell">
                    <span>Images</span>
                </div>
                <div class="ct-u-displayTableCell">
                    <span>Price &amp; Amentities</span>
                </div>
                <div class="ct-u-displayTableCell">
                    <span>Done!</span>
                </div>
            </div>
        </div>
    </div>
</header>
<section class="ct-u-paddingTop50 ct-u-paddingBottom100">
    <div class="container">
        <div class="ct-headerText--normal text-uppercase ct-u-marginBottom40">
            <h2>
                Step 1<br>
                <span class="ct-text--highlightGray">Description &amp; Address</span>
            </h2>
        </div>
        <div class="row">
            <div class="col-md-6">
                <form action="@Url.Action("Step2","Property")" role="form" class="ct-formSubmission" data-ajax="#result">
                    <div class="form-group ">
                        <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Title</label>
                        @Html.TextBoxFor(x => x.Title, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom40", required="required" })
                        <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Address</label>
                        @Html.TextAreaFor(x => x.Address, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom40", required = "required" })
                        <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Property description</label>
                        @Html.TextAreaFor(x => x.Description, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom40", required="required" })
                        <label class="ct-fw-600 text-uppercase ct-u-marginBottom10">Mark on map <span>You can drag &amp; drop marker</span></label>
                        <hr />
                      <div class="col-md-12">
                          <input id="pac-input" class="controls" type="text" placeholder="Search Box">
                          <div id="map"></div>

                      </div>
                        <hr />
                         <h5 class="ct-u-marginBottom10">GPS Data</h5>
                        <div class="ct-latlngAuto">
                            @Html.TextBoxFor(x => x.Latitude, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom10 latidude", required = "required", placeholder = "Latidude" })
                            @Html.TextBoxFor(x => x.Longitude, new { @class = "form-control input-lg ct-input--border ct-u-marginBottom50 longitude", required = "required", placeholder = "Longitude" })
                        </div>
                        <div class="ct-container--Big text-right">
                            <button type="submit" class="btn btn-warning">Continue to Step 2</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>
@section Scripts {
<script>
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.

    function initAutocomplete() {
        var marker;
        var latlng = new google.maps.LatLng(-33.8688, 151.2195);
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -33.8688, lng: 151.2195 },
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });
        marker = new google.maps.Marker({
            position: latlng,
            map: map
        });
        google.maps.event.addListener(map, 'click', function (event) {
            marker.setPosition(event.latLng);

            var yeri = event.latLng;

            var latlongi = "(" + yeri.lat().toFixed(6) + ", " + yeri.lng().toFixed(6) + ")";
            document.getElementById('Latitude').value = yeri.lat().toFixed(6);
            document.getElementById('Longitude').value = yeri.lng().toFixed(6);


        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // [START region_getplaces]
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.


                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

    }


</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYN4VjgQCPJqXyavhf1ZLevhsGD-p1qnI&libraries=places&callback=initAutocomplete" async defer></script>

    
}
